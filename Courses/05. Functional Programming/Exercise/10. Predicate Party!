package com.company;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        ArrayList<String> guests = Arrays.stream(scanner.nextLine().split("\\s+"))
                .collect(Collectors.toCollection(ArrayList::new));

        String partyOrCmd = scanner.nextLine();


        while (!"Party!".equalsIgnoreCase(partyOrCmd)) {
            String[] elem = partyOrCmd.split("\\s+");
            String removeOrDouble = elem[0];
            String startEndOrLength = elem[1];
            String strOrLength = elem[2];

            Predicate<String> predicate = createPredicate(startEndOrLength, strOrLength);

            if (removeOrDouble.equalsIgnoreCase("remove")) {
                guests.removeIf(predicate);
            } else {

                ArrayList<String> guestsToAdd = new ArrayList<>();
                guests.forEach( guest -> {
                    if(predicate.test(guest)){
                        guestsToAdd.add(guest);
                    }
                });

                guests.addAll(guestsToAdd);
            }

            partyOrCmd = scanner.nextLine();
        }

        Collections.sort(guests);

        if(guests.isEmpty()){
            System.out.println("Nobody is going to the party!");
        }else{
            System.out.print(guests.toString().replaceAll("\\[|\\]", ""));
            System.out.print(" are going to the party!");
        }
    }

    public static Predicate<String> createPredicate(String type, String string) {
        Predicate<String> predicate;
        switch (type) {
            case "StartsWith":
                predicate = str -> str.startsWith(string);
                break;
            case "EndsWith":
                predicate = str -> str.endsWith(string);
                break;
            default:
                predicate = str -> str.length() == Integer.parseInt(string);
                break;
        }

        return predicate;
    }
}
