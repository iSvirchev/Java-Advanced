package com.company;

import java.text.DecimalFormat;
import java.util.*;

public class Main {

    public static void main(String[] args) {
                Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());

        Map<String,TreeMap<String,LinkedList<Double>>> typeAndNames = new LinkedHashMap<>();
        Map<String, List<Double>> typeAvg = new LinkedHashMap<>();

        while (n-->0){
            String[] elements = scanner.nextLine().split("\\s+");
            String type = elements[0];
            String name = elements[1];

            String dmgString = elements[2];
            String healthString = elements[3];
            String armorString = elements[4];

            double dmg = 45;
            double health = 250;
            double armor = 10;

            if(!dmgString.equalsIgnoreCase("null")){
                dmg = Double.parseDouble(dmgString);
            }
            if(!healthString.equalsIgnoreCase("null")){
                health = Double.parseDouble(healthString);
            }
            if(!armorString.equalsIgnoreCase("null")){
                armor = Double.parseDouble(armorString);
            }

            if(!typeAndNames.containsKey(type)){
                typeAndNames.put(type, new TreeMap<>());
                typeAndNames.get(type).put(name, new LinkedList<>());
                typeAndNames.get(type).get(name).add(dmg);
                typeAndNames.get(type).get(name).add(health);
                typeAndNames.get(type).get(name).add(armor);

                typeAvg.put(type,new LinkedList<>());
                typeAvg.get(type).add(dmg);
                typeAvg.get(type).add(health);
                typeAvg.get(type).add(armor);
            }else {
                if(typeAndNames.get(type).containsKey(name)){
                    typeAvg.get(type).set(0,dmg);
                    typeAvg.get(type).set(1,health);
                    typeAvg.get(type).set(2, armor);
                }else{
                    typeAvg.get(type).set(0,typeAvg.get(type).get(0)+dmg);
                    typeAvg.get(type).set(1,typeAvg.get(type).get(1)+health);
                    typeAvg.get(type).set(2,typeAvg.get(type).get(2)+armor);
                }

                typeAndNames.get(type).put(name, new LinkedList<>());
                typeAndNames.get(type).get(name).add(dmg);
                typeAndNames.get(type).get(name).add(health);
                typeAndNames.get(type).get(name).add(armor);
            }
        }

        for (Map.Entry<String, TreeMap<String, LinkedList<Double>>> kvpM1 : typeAndNames.entrySet()) { // types + map of dragons
            typeAvg.get(kvpM1.getKey()).set(0,typeAvg.get(kvpM1.getKey()).get(0)/kvpM1.getValue().size());
            typeAvg.get(kvpM1.getKey()).set(1,typeAvg.get(kvpM1.getKey()).get(1)/kvpM1.getValue().size());
            typeAvg.get(kvpM1.getKey()).set(2,typeAvg.get(kvpM1.getKey()).get(2)/kvpM1.getValue().size());
            System.out.println(String.format("%s::(%.2f/%.2f/%.2f)"
                    ,kvpM1.getKey()
                    ,typeAvg.get(kvpM1.getKey()).get(0)
                    ,typeAvg.get(kvpM1.getKey()).get(1)
                    ,typeAvg.get(kvpM1.getKey()).get(2)
            ));


            for (Map.Entry<String, LinkedList<Double>> kvpM2 : kvpM1.getValue().entrySet()) { // names + map of stats
                StringBuilder sb= new StringBuilder();
                sb.append("-" + kvpM2.getKey() + " -> damage: ");

                sb.append(String.format("%.0f, ",kvpM2.getValue().get(0)));
                sb.append(String.format("health: %.0f, ",kvpM2.getValue().get(1)));
                sb.append(String.format("armor: %.0f",kvpM2.getValue().get(2)));

                System.out.println(sb);
            }
        }

    }
}
